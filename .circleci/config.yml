version: 2.1

jobs:
  build:
    working_directory: /go/src/github.com/bcates277/invoicer-chapter2
    docker:
      - image: circleci/golang:1.10
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Setup environment
          command: |
            gb="/src/github.com/${THE_CIRCLE_PROJECT_USERNAME}";
            if [ ${THE_CIRCLE_PROJECT_USERNAME} == 'Securing-DevOps' ]; then
              dr="securingdevops"
            else
              dr=$DOCKER_USER
            fi
            cat >> $BASH_ENV \<< EOF
            export GOPATH_HEAD="$(echo ${GOPATH}|cut -d ':' -f 1)"
            export GOPATH_BASE="$(echo ${GOPATH}|cut -d ':' -f 1)${gb}"
            export DOCKER_REPO="$dr"
            EOF

      - run: mkdir -p "${GOPATH_BASE}"
      - run: mkdir -p "${GOPATH_HEAD}/bin"

      - run:
          name: Testing application
          command: |
            go test \
            github.com/${THE_CIRCLE_PROJECT_USERNAME}/${THE_CIRCLE_PROJECT_REPONAME}

      - run:
          name: Build and Push Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS};
              go install --ldflags '-extldflags "-static"' \
              github.com/${THE_CIRCLE_PROJECT_USERNAME}/${THE_CIRCLE_PROJECT_REPONAME};
              mkdir bin;
              cp "$GOPATH_HEAD/bin/${THE_CIRCLE_PROJECT_REPONAME}" bin/invoicer;
              docker build -t ${DOCKER_REPO}/${THE_CIRCLE_PROJECT_REPONAME} .;
              docker images --no-trunc | awk '/^app/ {print $3}' | \
                sudo tee $CIRCLE_ARTIFACTS/docker-image-shasum256.txt;
              docker push ${DOCKER_REPO}/${THE_CIRCLE_PROJECT_REPONAME};
            fi

      - run:
          name: Create reports directory
          command: |
            mkdir -p $(pwd)/reports

      - run:
          name: Trivy Scan with Full Output
          command: |
            set -ex
            IMAGE_NAME="${DOCKER_REPO}/${THE_CIRCLE_PROJECT_REPONAME}"
            echo "Scanning image: $IMAGE_NAME"
            mkdir -p reports
            docker pull "$IMAGE_NAME"  # <-- Force pull to catch image errors
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
              -v $(pwd)/reports:/root/reports \
              aquasec/trivy image --debug --format json \
              --output /root/reports/trivy-report.json "$IMAGE_NAME"

      - run:
          name: Check Trivy Report File
          command: |
            echo "Current directory: $(pwd)"
            ls -al
            echo "Checking reports directory:"
            ls -al reports

      - run:
          name: Verify Trivy Report Creation
          command: |
            ls -l $(pwd)/reports
            cat $(pwd)/reports/trivy-report.json || echo "Report file not found"

      - store_artifacts:
          path: reports/trivy-report.json
          destination: trivy-report

